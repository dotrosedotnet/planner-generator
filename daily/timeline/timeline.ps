%!PS
%%BoundingBox: 0 0 294 419 %slightly under A6

% creates mm unit
/mm {72 mul 25.4 div} def
/cm {72 mul 2.54 div} def
/points_to_mm {72 div 25.4 mul} def
/points_to_cm {72 div 2.54 mul} def

% page dimensions
/page_width 294 def % same as BoundingBox
/page_height 419 def % same as BoundingBox

% timeline nours, and hour markings
/hours 24 def
/clock_type {
  12
  % 24
} def
/hour_marking_frequency 3 def
/rows_per_hour 1 floor abs def
/first_hour 3 def
/first_hour_marking 3 def
/cells_padding_timeline 1 ceiling def

% cell dimensions
/cell_height 4 mm def
/cell_width 4 mm def

/number_position {
  cell_width 2 div
  grid_height cells_padding_timeline cell_height mul fontscale 1 3 div mul add sub
  translate
} def
% grid size
/max_width_grid false def % if max_width is set to true, grid_left and _right are set to minimum
/desired_row_length 15 def % length in cells

/distance_from_top {page_height exch sub} def
/distance_from_right {page_width exch sub} def

/top_margin_width 5 mm def
/bottom_margin 5 mm def
/left_margin 6 mm def
/right_margin_width 6 mm def

/row_cell_count desired_row_length 1 sub def % why minus 1 lol

/grid_width {
  row_cell_count cell_width mul
} def

/max_grid_height { page_height top_margin_width bottom_margin sub sub } def

/calculated_grid_height {
  rows_per_hour hours mul cell_height mul
} def

/column_cell_count {
  % if calculated grid height is taller than page_height,
  % set the column cell count to maximum cells that fit on page
  % TODO:if calculated grid height is taller than page_height:
  % lower cell height
  % if cell_height is at minimum (TODO implement minimum cell height)
  % lower padding cell quantity (TODO rename padding cell var)
  % if padding cell quantity = 0
  % lower hour count, alternating end and start time removal
  calculated_grid_height max_grid_height lt
  {
    hours rows_per_hour mul cells_padding_timeline 2 mul 1 add add % why in the gosh am I adding one here
  }
  {
    max_grid_height cell_height div floor
  } ifelse
} def

/grid_height cell_height column_cell_count mul def

/alignment_proc {
% horizontal alignment
align-h /center eq
{
  page_width row_cell_count 1 add cell_width mul sub 2 div
}
{
  align-h /left eq
  {
    % make it left
    left_margin
  }
  {
    % make it right
    page_width grid_width sub right_margin_width sub
  } ifelse
} ifelse
0 translate

% vertical alignment
align-v /center eq
{
  % center here
  page_height column_cell_count 1 add cell_height mul sub 2 div
}
{
  align-v /top eq
  {
    % top here
    top_margin_width distance_from_top grid_height sub
  }
  {
    % bottom here
    bottom_margin
  } ifelse
} ifelse
0 exch translate
} def
% line features
/linewidth 0.2 def
/dots_per_cell 10 def
linewidth setlinewidth
0 setlinejoin
0 setlinecap
/dot_height 0.01 def
[
  15 20 div
  10 20 div
] 0 setdash

/fontscale cell_height 2 sub def


/center_text_in_cell_horizontally {
  /n 1 index def
  /str 2 string def
  cell_width 2 div
  n str cvs stringwidth pop 2 div sub
  0 moveto
} def

/draw_cell-h {
  newpath
  0 cell_width moveto
  cell_width 2 div 0 rlineto
  cell_width 2 div 0 rmoveto
  cell_width neg 2 div 0 rlineto
  stroke
} def

/draw_cell-v {
  newpath
  0 0 moveto
  0 cell_height 2 div rlineto
  0 cell_height 2 div rmoveto
  0 cell_height neg 2 div rlineto
  stroke
} def

% grid placement on page
/align-v { % choose one
  /center
  % /top
  % /bottom
} def

% grid placement on page
/align-h { % choose one
  /center
  % /left
  % /right
} def

alignment_proc

gsave
/draw_line-v {
  draw_cell-v
  0 1 column_cell_count {
    draw_cell-v
    0 cell_height translate
  } for
} def

% draw vertical lines
gsave
0 1 row_cell_count 1 add {
  gsave
  draw_line-v
  grestore
  cell_width 0 translate
} for
clear
grestore

/draw_line-h {
  0 1 row_cell_count {
    gsave
      draw_cell-h
    grestore
    cell_width 0 translate
  } for
} def

0 cell_width neg translate

% draw horizontal lines
gsave
0 1 column_cell_count 1 add {
  gsave
  draw_line-h
  grestore
  0 cell_height translate
} for
clear
grestore
grestore

% position numbers
number_position

% % draw white circles behind numbers
% gsave
%   cell_width 2 div
%   cell_height 4 div
%   translate
%   [] 0 setdash
%   2 setlinewidth
%   /str 2 string def
%   first_hour 1 sub
%   hour_marking_frequency
%   first_hour hours add 1 sub {
%     /n 1 index def
%     /n n clock_type mod 1 add def
%     /n n str cvs def
%     /width n stringwidth pop def
%     gsave
%       1 setgray
%       newpath
%       0 fontscale neg cell_height 2 div add moveto
%       0 fontscale 0.83 mul rlineto % who the fuck knows lol
%       width 2 div neg 0 moveto
%       width 0 rlineto
%       stroke
%     grestore
%   0 cell_height rows_per_hour mul neg hour_marking_frequency mul translate
%   } for
% grestore


/str 2 string def
/Helvetica-Narrow findfont fontscale scalefont setfont

% draw numbers
gsave
first_hour 1 sub
hour_marking_frequency
first_hour hours add 1 sub {
  /n 1 index def
  /n n clock_type mod 1 add def
  /n n str cvs def
  /width n stringwidth pop def
  1 setgray
  gsave
  n center_text_in_cell_horizontally
  fontscale 6 div setlinewidth
  [] 0 setdash
  n true charpath
  stroke
  grestore
  0 cell_height rows_per_hour mul neg hour_marking_frequency mul translate
} for
grestore

% draw numbers
gsave
first_hour 1 sub
hour_marking_frequency
first_hour hours add 1 sub {
  /n 1 index def
  /n n clock_type mod 1 add def
  /n n str cvs def
  /width n stringwidth pop def
  0 setgray
  gsave
  n center_text_in_cell_horizontally
  n show
  grestore
  0 cell_height rows_per_hour mul neg hour_marking_frequency mul translate
} for
grestore

%%EOF
