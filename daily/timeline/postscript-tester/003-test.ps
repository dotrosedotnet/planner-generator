%!PS
%%BoundingBox: 0 0 294 419 %slightly under A6

% creates mm unit
/mm {72 mul 25.4 div} def
/cm {72 mul 2.54 div} def
/points_to_mm {72 div 25.4 mul} def
/points_to_cm {72 div 2.54 mul} def

% page dimensions
/page_width 294 def % same as BoundingBox
/page_height 419 def % same as BoundingBox

% timeline nours, and hour markings
/hours 12 def
/hour_marking_frequency 3 def
/squares_per_hour 1 def
/first_hour 5 def
/first_hour_marking 3 def
/cells_padding_timeline 1 def

% cell dimensions
/cell_height 3.7 mm def
/cell_width 3.7 mm def

% grid size
/max_width_grid false def % if max_width is set to true, grid_left and _right are set to minimum
/desired_row_length 25 def % length in cells

/distance_from_top {page_height exch sub} def
/distance_from_right {page_width exch sub} def

/top_margin_width 5 mm def
/bottom_margin 5 mm def
/left_margin 6 mm def
/right_margin_width 6 mm def

/row_cell_count desired_row_length 1 sub def % why minus 1 lol

/grid_width {
  row_cell_count cell_width mul
} def

/max_grid_height { page_height top_margin_width bottom_margin sub sub } def

/calculated_grid_height {
  squares_per_hour hours mul cell_height mul
} def

/column_cell_count {
  % if calculated grid height is taller than page_height,
  % set the column cell count to maximum cells that fit on page
  % TODO:if calculated grid height is taller than page_height:
  % lower cell height
  % if cell_height is at minimum (TODO implement minimum cell height)
  % lower padding cell quantity (TODO rename padding cell var)
  % if padding cell quantity = 0
  % lower hour count, alternating end and start time removal
  calculated_grid_height max_grid_height lt
  {
    hours squares_per_hour mul cells_padding_timeline 2 mul 1 add add % why in the gosh am I adding one here
  }
  {
    max_grid_height cell_height div floor
  } ifelse
} def

/grid_height cell_height column_cell_count mul def

% line features
/linewidth 0.2 def
/dots_per_cell 10 def
linewidth setlinewidth
0 setlinejoin
0 setlinecap
/dot_height 0.01 def
[
  15 20 div
  10 20 div
] 0 setdash

/fontscale 8 def

/Times-Bold findfont fontscale scalefont setfont

/center_text_in_cell_horizontally {
  /n 1 index def
  /str 2 string def
  cell_width 2 div
  n str cvs stringwidth pop 2 div sub
  0 moveto
} def

/draw_cell-h {
  newpath
  0 cell_width moveto
  cell_width 2 div 0 rlineto
  cell_width 2 div 0 rmoveto
  cell_width neg 2 div 0 rlineto
  stroke
} def

/draw_cell-v {
  newpath
  0 0 moveto
  0 cell_height 2 div rlineto
  0 cell_height 2 div rmoveto
  0 cell_height neg 2 div rlineto
  stroke
} def

% TODO: this is where the alignment will go

% grid placement on page
/align-v { % choose one
  /center
  % /top
  % /bottom
} def

% grid placement on page
/align-h { % choose one
  /center
  % /left
  % /right
} def



% cell_width cell_height translate

% horizontal alignment
% why must I add 1 here?
align-h /center eq
{
  page_width row_cell_count 1 add cell_width mul sub 2 div
}
{
  align-h /left eq
  {
    % make it left
    left_margin
  }
  {
    % make it right
    page_width grid_width sub right_margin_width sub
  } ifelse
} ifelse
0 translate

% vertical alignment
align-v /center eq
{
  % center here
  page_height column_cell_count 1 add cell_height mul sub 2 div % WHY AM I ADDING 1 HERE lol
}
{
  align-v /top eq
  {
    % top here
    top_margin_width distance_from_top grid_height sub
  }
  {
    % bottom here
    bottom_margin
  } ifelse
} ifelse
0 exch translate

/draw_line-v {
  draw_cell-v
  0 1 column_cell_count {
    draw_cell-v
    0 cell_height translate
  } for
} def

gsave
% draw vertical lines
0 1 row_cell_count 1 add {
  gsave
  draw_line-v
  grestore
  cell_width 0 translate
} for
clear
grestore

/draw_line-h {
  0 1 row_cell_count {
    gsave
      draw_cell-h
    grestore
    cell_width 0 translate
  } for
} def

0 cell_height neg translate

% draw horizontal lines
0 1 column_cell_count 1 add {
  gsave
  draw_line-h
  grestore
  0 cell_height translate
} for
clear

% position numbers
cell_width 2 div
cell_height 1.27 cells_padding_timeline add mul neg
translate

0 setgray

clear

/clock_type {
  12
  % 24
} def

% draw white circles behind numbers
gsave
  cell_width 2 div
  cell_height 3.5 div
  translate
  [] 0 setdash
  2 setlinewidth
  /str 2 string def
  first_hour 1 sub
  1
  first_hour hours add 1 sub {
    /n 1 index def
    /n n clock_type mod 1 add def
    /n n str cvs def
    /width n stringwidth pop def
    gsave
      newpath
      0 -3.5 moveto
      0 6.4 rlineto
      width 2 div neg 0 moveto
      width 0 rlineto
      1 setgray
      stroke
    grestore
  0 cell_height neg translate
  } for
grestore

% draw numbers
gsave
first_hour 1 sub
1
first_hour hours add 1 sub {
  /n 1 index def
  /n n clock_type mod 1 add def
  /n n str cvs def
  /width n stringwidth pop def
  0 setgray
  gsave
  n center_text_in_cell_horizontally
  n show
  grestore
  0 cell_height neg translate
} for
grestore

%%EOF
