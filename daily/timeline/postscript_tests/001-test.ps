%!PS
%%BoundingBox: 0 0 297 420
%%Pages: 1
%%Page: 1 1

%TODO: grid width can be determined by minimum-margins and minimum-row-length

% creates mm unit
/mm {72 mul 25.4 div} def

% page dimensions
/page-width 297 def % same as BoundingBox
/page-height 420 def % same as BoundingBox

% line features
/linewidth 0.8 def
[0.01 3] 0 setdash

% timeline hours, and hour markings
/hours 26 def
/hour-marking-frequency 3 def
/squares-per-hour 1 def
/first-hour 2 def
/first-hour-marking 3 def

% cell dimensions
/cell-height 3.5 mm def
/cell-width 3.5 mm def

% grid size
/max-width-grid false def % if max-width is set to true, grid-left and -right are set to minimum
/grid-minimum-left-margin 4 mm def
/grid-minimum-right-margin 4 mm def
/max-row-length 17 def % length in cells

% grid placement on page
/alignment { % choose one
  /center
  % /left
  % /right
} def
/max-width-grid-width {
  % calculates width of max-width-grid TODO
  % ( page-width - margins ) - ( max-row-length * cell-width) floor
  /min-margin-total grid-minimum-left-margin grid-minimum-right-margin add def
  /available-width page-width min-margin-total sub def
  /desired-grid-width max-row-length cell-width mul def
  /calculated-margin-total available-width desired-grid-width sub def
  /largest-possible-grid {
    % calculate largest possible grid
    % available-width / cell-width floor
    available-width cell-width div floor
  } def
  calculated-margin-total 0 lt
  {
    % if the desired grid is wider than the available width, fit as many columns as possible
    largest-possible-grid
  }
  {
    % if desired grid width fits, grid is as wide as max-row-length * cell-width
    max-row-length cell-width mul
  } ifelse
} def
/grid-width {
  % 3 options:
  % - max-width-grid on
  % - max-width-grid off
  % - max-row-length is larger than page can accomodate
  max-width-grid true eq
  {
    max-width-grid-width
  }
  {
    % if max-row-length * cell-width > page-width
    max-row-length cell-width mul page-width gt
    {
      max-width-grid-width
    }
    {
      % max-row-length * cell-width
      max-row-length cell-width mul
    } ifelse
  } ifelse
} def
/grid-left-margin-center {
  page-width grid-width sub 2 div
} def
/grid-left-margin-left {
  grid-minimum-left-margin
} def
/grid-left-margin-right {
  %TODO: needs grid-width calculated
  page-width grid-width grid-minimum-right-margin sub sub
} def
/grid-left-margin {
  alignment /center eq
  {
    % left margin is half of possible margin
    grid-left-margin-center
  }
  {
    alignment /left eq
    {
      % left margin is minimized
      grid-left-margin-left
    }
    {
      alignment /right eq
      {
        % left margin is maximized
        grid-left-margin-right
      }
      {
        % default to centering behavior
        grid-left-margin-center
      } ifelse
    } ifelse
  } ifelse
} def

% /center-horizontally 0 def % set to 1 to center grid on page
/grid-top-margin-size 10 def
/grid-top-margin {page-height grid-top-margin-size sub} def
/grid-height {
  cell-height hours squares-per-hour mul mul
} def
/grid-bottom {
  grid-top-margin grid-height sub
} def

% let's draw
% let's make this one 'for' loop, utilizing the count as a multiplier
/first-vertical-line {
  newpath
  grid-left-margin grid-top-margin moveto
  grid-left-margin grid-bottom lineto
  linewidth setlinewidth 1 setlinecap
  stroke
} def
first-vertical-line

/vertical-line-x grid-left-margin cell-width add def
vertical-line-x cell-width grid-width {
  newpath
  vertical-line-x grid-top-margin moveto
  vertical-line-x grid-bottom lineto
  stroke
  /vertical-line-x vertical-line-x cell-width add def
} for

vertical-line-x

showpage
%%EOF
